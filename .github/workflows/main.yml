name: CI/CD Docker

on:
  push:
    branches: [ main, dev ]

env:
  DOCKER_IMAGE: tinywhale1031/koview-auto-deploy
  VERSION: ${{ github.sha }}
  NAME: koview_cicd
  AWS_RDS_URL: ${{ secrets.AWS_RDS_URL }}
  AWS_RDS_USERNAME: ${{ secrets.AWS_RDS_USERNAME }}
  AWS_RDS_PASSWORD: ${{ secrets.AWS_RDS_PASSWORD }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  SECRETE_ACTION_KEY: ${{ secrets.SECRETE_ACTION_KEY }}

jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
          install: true
          use: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./koview-server
          file: ./koview-server/Dockerfile.prod
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        env:
          DOCKER_BUILDKIT: 1

  deploy:
    needs: build_and_push
    name: Deploy Docker Image
    runs-on: [self-hosted, label-go]
    steps:
      - name: Docker Login
        run: |
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Stop and remove old container
        run: |
          docker stop ${{ env.NAME }} || true
          docker rm ${{ env.NAME }} || true

      - name: Pull the new image
        run: |
          docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Remove old images
        run: |
          docker image prune -f

      - name: Run the new container
        run: |
          docker run -d -p 80:8080 --name ${{ env.NAME }} \
            --env "AWS_RDS_URL=${{ secrets.AWS_RDS_URL }}" \
            --env "AWS_RDS_USERNAME=${{ secrets.AWS_RDS_USERNAME }}" \
            --env "AWS_RDS_PASSWORD=${{ secrets.AWS_RDS_PASSWORD }}" \
            --env "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" \
            --env "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --env "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            "${{ env.DOCKER_IMAGE }}:${{ github.sha }}"

