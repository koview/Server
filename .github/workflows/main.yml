name: CI/CD Docker

on:
  push:
    branches: [ main, dev ]

env:
  DOCKER_IMAGE: tinywhale1031/koview-auto-deploy
  VERSION: ${{ github.sha }}
  NAME: koview_cicd

jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: [self-hosted, label-go]  # self-hosted 및 label-go 라벨이 붙은 러너에서 실행
    steps:
      - name: Ensure Docker socket is available
        run: |
          sudo ln -sf ~/.docker/run/docker.sock /var/run/docker.sock

      - name: Add user to Docker group
        run: |
          sudo usermod -aG docker $USER
          sudo systemctl restart docker

      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
          install: false
          use: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./koview-server
          file: ./koview-server/Dockerfile.prod
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        env:
          DOCKER_BUILDKIT: 1
          AWS_RDS_URL: ${{ secrets.AWS_RDS_URL }}
          AWS_RDS_USERNAME: ${{ secrets.AWS_RDS_USERNAME }}
          AWS_RDS_PASSWORD: ${{ secrets.AWS_RDS_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    needs: build_and_push
    name: Deploy Docker Image
    runs-on: [self-hosted, label-go]  # self-hosted 및 label-go 라벨이 붙은 러너에서 실행
    steps:
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ap-northeast-2

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.SECRETE_ACTION_KEY }}

      - name: EC2 Run Commands
        run: |
          sudo docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }};
          sudo docker stop ${{ env.NAME }} || true;
          sudo docker rm ${{ env.NAME }} || true;
          sudo docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }};
          sudo docker run -d -p 8080:8080 --name ${{ env.NAME }} \
            --env AWS_RDS_URL=${{ secrets.AWS_RDS_URL }} \
            --env AWS_RDS_USERNAME=${{ secrets.AWS_RDS_USERNAME }} \
            --env AWS_RDS_PASSWORD=${{ secrets.AWS_RDS_PASSWORD }} \
            --env JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
            --env AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --env AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --restart always ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
